#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usepackage{cibeamer}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%% Lecture for Artificial Intelligence, Chapter 4, http://artint.info 
\end_layout

\begin_layout Plain Layout

%% Copyright David L.
 Poole and Alan K.
 Mackworth, 2010-2013
\end_layout

\begin_layout Plain Layout

%% Copyright Peter Ljunglöf, 2015
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%% This work is licensed under CC BY-NC-SA 4.0, the Creative Commons
\end_layout

\begin_layout Plain Layout

%% Attribution-NonCommercial-ShareAlike 4.0 International License.
 
\end_layout

\begin_layout Plain Layout

%% To view a copy of this license: http://creativecommons.org/licenses/by-nc-sa/4.
0/
\end_layout

\end_inset


\end_layout

\begin_layout Title (Plain Frame)
Chapter 6: Constraint satisfaction problems
\end_layout

\begin_layout Subtitle
DIT410/TIN173 Artificial Intelligence
\end_layout

\begin_layout Author
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Peter Ljunglöf
\end_layout

\end_inset

Peter Ljunglöf
\begin_inset Newline newline
\end_inset


\size footnotesize

\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

(inspired by slides by Poole & Mackworth, Russell & Norvig, et al)
\end_layout

\begin_layout Date
15 April, 2016
\end_layout

\begin_layout PlainFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{frame}<beamer>[plain]{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection]
\end_layout

\begin_layout Plain Layout

  
\backslash
end{frame}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Variables and constraints 
\end_layout

\begin_layout Subsection
Russell & Norvig 6.1, Poole & Mackworth 4.1--4.2
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Constraint satisfaction problems (CSP)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Standard search problem:
\end_layout

\begin_layout Itemize
the 
\begin_inset Flex Alert
status open

\begin_layout Plain Layout
state
\end_layout

\end_inset

 is a 
\begin_inset Quotes eld
\end_inset

black box
\begin_inset Quotes erd
\end_inset

 -- any old data structure that 
\begin_inset Newline newline
\end_inset

supports goal test, cost evaluation, successor
\end_layout

\begin_layout Standard
CSP is a more specific search problem:
\end_layout

\begin_layout Itemize
the 
\begin_inset Flex Alert
status open

\begin_layout Plain Layout
state
\end_layout

\end_inset

 is defined by 
\emph on
variables
\emph default
 
\begin_inset Formula $X_{i}$
\end_inset

, taking 
\emph on
values
\emph default
 from 
\begin_inset Newline newline
\end_inset

the 
\emph on
domain
\emph default

\begin_inset space ~
\end_inset


\begin_inset Formula $\D_{i}$
\end_inset


\end_layout

\begin_layout Itemize
the 
\begin_inset Flex Alert
status open

\begin_layout Plain Layout
goal test
\end_layout

\end_inset

 is a set of 
\emph on
constraints
\emph default
 specifying allowable combinations of values for subsets of variables
\end_layout

\begin_layout Standard

\emph on
\begin_inset Note Note
status open

\begin_layout Plain Layout
Simple example of a 
\emph on
formal representation language
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since CSP is more specific, it allows useful algorithms with more power
 than standard search algorithms 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
States and variables
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Just a few variables can describe many states:
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $n$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
binary variables can describe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $2^{n}$
\end_inset


\size default
 
\begin_inset space ~
\end_inset

 states
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
binary variables can describe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $2^{10}$
\end_inset

 
\begin_inset space ~
\end_inset

= 1,024
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
binary variables can describe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $2^{20}$
\end_inset

 
\begin_inset space ~
\end_inset

= 1,048,576
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
binary variables can describe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $2^{30}$
\end_inset

 
\begin_inset space ~
\end_inset

= 1,073,741,824
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
binary variables can describe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $2^{100}$
\end_inset

 = 1,267,650,600,228,229,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

401,496,703,205,376
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Hard and soft constraints
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item 
\backslash
hiliteb{Multi-dimensional Selection Problems}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Given a set of variables, assign a value to each variable that either 
\end_layout

\begin_layout Itemize
satisfies some set of constraints: 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

satisfiability problems
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 --- 
\begin_inset Quotes eld
\end_inset

hard constraints
\begin_inset Quotes erd
\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
minimizes some cost function, where each assignment of values to
\begin_inset space ~
\end_inset

variables has some cost: 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

optimization problems
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 --- 
\begin_inset Quotes eld
\end_inset

soft constraints
\begin_inset Quotes erd
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
Many problems are a mix of hard and soft constraints
\begin_inset Newline newline
\end_inset

 (called constrained optimization problems)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Relationship to search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
CSP differences to general search problems:
\end_layout

\begin_layout Itemize
The path to a goal isn't important, only the solution is.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Many algorithms exploit the multi-dimensional nature of the problems.
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
There are no predefined starting nodes.
\end_layout

\begin_layout Itemize
Often these problems are huge, with thousands of variables, 
\begin_inset Newline newline
\end_inset

so systematically searching the space is infeasible.
 
\end_layout

\begin_layout Itemize
For optimization problems, there are no well-defined goal nodes.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Posing a CSP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A CSP is characterized by 
\end_layout

\begin_layout Itemize
A set of variables 
\begin_inset Formula $X_{1},X_{2},\ldots,X_{n}$
\end_inset

.
 
\end_layout

\begin_layout Itemize
Each variable 
\begin_inset Formula $X_{i}$
\end_inset

 has an associated domain 
\begin_inset Formula $\D_{i}$
\end_inset

 of possible values.
 
\end_layout

\begin_layout Itemize
There are hard constraints on various subsets of the variables which specify
 legal combinations of values for these variables.
 
\end_layout

\begin_layout Itemize
A solution to the CSP is an assignment of a value to each variable that
 satisfies all the constraints.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item For optimization problems there is a function that gives a cost
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%for each assignment of a value to each variable.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item A solution is an
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%assignment of values to the variables that minimizes the cost function.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Scheduling activities
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Variables: 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

, 
\begin_inset Formula $D$
\end_inset

, 
\begin_inset Formula $E$
\end_inset

 
\begin_inset Newline newline
\end_inset

representing the starting times of various activities.
 
\end_layout

\begin_layout Description
Domains: 
\begin_inset Formula $\D_{A}=\D_{B}=\D_{C}=\D_{D}=\D_{E}=\{1,2,3,4\}$
\end_inset

 
\end_layout

\begin_layout Description
Constraints: 
\begin_inset Formula $(B\neq3)\AND(C\neq2)\AND(A\neq B)\AND(B\neq C)\AND$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $(C<D)\AND(A=D)\AND(E<A)\AND(E<B)\AND$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $(E<C)\AND(E<D)\AND(B\neq D)$
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Crossword puzzle
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename figures/ch06/crossword1.pdf
	width 40text%

\end_inset


\begin_inset space \hspace{}
\length 1em
\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="1">
<features rotate="0" tabularvalignment="bottom">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Words:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ant, big, bus, car, has 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
book, buys, hold,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lane, year
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
beast, ginger, search, 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
symbol, syntax
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="none" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="none" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="none" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Constraint satisfaction revisited
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Constraint Satisfaction Problem
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 consists of: 
\end_layout

\begin_deeper
\begin_layout Itemize
a set of variables 
\end_layout

\begin_layout Itemize
a set of possible values, a 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

domain
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 for each variable 
\end_layout

\begin_layout Itemize
a set of constraints amongst subsets of the variables 
\end_layout

\end_deeper
\begin_layout Itemize
The aim is to find a set of assignments that satisfies all constraints,
 or to find all such assignments.
 
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Crossword puzzle
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch04/crossr.pdf
	width 45text%

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "b"
hor_pos "c"
has_inner_box 1
inner_pos "b"
use_parbox 0
use_makebox 0
width "30text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left
at, be, he, it, on, 
\begin_inset Newline newline
\end_inset

 eta, hat, her, him, one,
\begin_inset Newline newline
\end_inset

 desk, dove, easy, else, help, kind, soon, this,
\begin_inset Newline newline
\end_inset

 dance, first, fuels, given, haste, loses, sense, sound, think, usage 
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator
 
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Dual representations
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Many problems can be represented in different ways as a CSP,
\begin_inset Newline newline
\end_inset

e.g., the crossword puzzle:
\end_layout

\begin_layout Itemize
First representation: 
\end_layout

\begin_deeper
\begin_layout Itemize
nodes represent word positions: 1-down…6-across 
\end_layout

\begin_layout Itemize
domains are the words 
\end_layout

\begin_layout Itemize
constraints specify that the letters on the intersections 
\begin_inset Newline newline
\end_inset

must be the same
\end_layout

\end_deeper
\begin_layout Itemize
Dual representation: 
\end_layout

\begin_deeper
\begin_layout Itemize
nodes represent the individual squares 
\end_layout

\begin_layout Itemize
domains are the letters 
\end_layout

\begin_layout Itemize
constraints specify that the words must fit 
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Representations for image interpretation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
First representation: 
\end_layout

\begin_deeper
\begin_layout Itemize
nodes represent the chains and regions 
\end_layout

\begin_layout Itemize
domains are the scene objects 
\end_layout

\begin_layout Itemize
constraints correspond to the intersections and adjacency 
\end_layout

\end_deeper
\begin_layout Itemize
Dual representation: 
\end_layout

\begin_deeper
\begin_layout Itemize
nodes represent the intersections 
\end_layout

\begin_layout Itemize
domains are the intersection labels 
\end_layout

\begin_layout Itemize
constraints specify that the chains must have same marking 
\end_layout

\end_deeper
\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Map colouring
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch06/australia.pdf
	width 45text%

\end_inset


\end_layout

\begin_layout Description
Variables: 
\begin_inset Formula $\mathit{WA}$
\end_inset

, 
\begin_inset Formula $NT$
\end_inset

, 
\begin_inset Formula $Q$
\end_inset

, 
\begin_inset Formula $\mathit{NSW}$
\end_inset

, 
\begin_inset Formula $V$
\end_inset

, 
\begin_inset Formula $\mathit{SA}$
\end_inset

, 
\begin_inset Formula $T$
\end_inset


\end_layout

\begin_layout Description
Domains: 
\begin_inset Formula $\D_{i}=\{red,green,blue\}$
\end_inset


\end_layout

\begin_layout Description
Constraints: adjacent regions must have different colors, 
\begin_inset Newline newline
\end_inset

e.g., 
\begin_inset Formula $\mathit{WA}\neq NT,\mathit{WA}\neq\mathit{SA},NT\neq\mathit{SA},NT\neq Q,\ldots$
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Map colouring
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch06/australia-solution.pdf
	width 45text%

\end_inset


\end_layout

\begin_layout Description
Solutions are assignments satisfying all constraints, e.g.,
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\{\mathit{WA}=red,NT=green,Q=red,\mathit{NSW}=green,$
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Formula $\hphantom{\{}V=red,\mathit{SA}=blue,T=green\}$
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Constraint graph
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Binary
\begin_inset space ~
\end_inset

CSP: each constraint relates at most two variables
\begin_inset Newline newline
\end_inset

(
\emph on
note:
\emph default
 this does not say anything about the domains)
\end_layout

\begin_layout Description
Constraint
\begin_inset space ~
\end_inset

graph: nodes are variables, arcs show constraints
\end_layout

\begin_layout Standard
\begin_inset VSpace -0.5in*
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch06/australia-csp.pdf
	width 45text%

\end_inset


\end_layout

\begin_layout Standard
CSP algorithms can use the graph structure to speed up search, 
\begin_inset Newline newline
\end_inset

e.g., Tasmania is an independent subproblem.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Cryptarithmetic puzzle
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch06/cryptarithmetic.pdf
	width 75text%

\end_inset


\end_layout

\begin_layout Description
Variables: 
\begin_inset Formula $F,T,U,W,R,O,X_{1},X_{2},X_{3}$
\end_inset


\end_layout

\begin_layout Description
Domains: 
\begin_inset Formula $\{0,1,2,3,4,5,6,7,8,9\}$
\end_inset


\end_layout

\begin_layout Description
Constraints: 
\begin_inset Formula $Alldiff(F,T,U,W,R,O)$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $O+O=R+10\cdot X_{1}$
\end_inset

, etc.
\end_layout

\begin_layout Standard

\emph on
Note:
\emph default
 This is not a binary CSP.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Varieties of CSPs
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Discrete variables:
\end_layout

\begin_layout Itemize
Finite domains: 
\end_layout

\begin_deeper
\begin_layout Itemize
size 
\begin_inset Formula $d\;\Longrightarrow\;O(d^{n})$
\end_inset

 complete assignments
\end_layout

\begin_layout Itemize
e.g., Boolean CSPs, including Boolean satisfiability (NP-complete)
\end_layout

\end_deeper
\begin_layout Itemize
Infinite domains (integers, strings, etc.)
\end_layout

\begin_deeper
\begin_layout Itemize
e.g., job scheduling -- variables are start/end times for each job
\end_layout

\begin_layout Itemize
need a constraint language, e.g., 
\begin_inset Formula $StartJob_{1}+5\leq StartJob_{3}$
\end_inset


\end_layout

\begin_layout Itemize
linear constraints are solvable -- nonlinear undecidable
\end_layout

\end_deeper
\begin_layout Standard
Continuous variables:
\end_layout

\begin_layout Itemize
e.g., scheduling for Hubble Telescope observations and manouvers
\end_layout

\begin_layout Itemize
linear constraints -- solvable in polynomial time!
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Varieties of constraints
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Unary constraints
\emph default
 involve a single variable:
\end_layout

\begin_layout Itemize
e.g., 
\begin_inset Formula $SA\neq green$
\end_inset


\end_layout

\begin_layout Standard

\emph on
Binary constraints
\emph default
 involve pairs of variables:
\end_layout

\begin_layout Itemize
e.g., 
\begin_inset Formula $SA\neq WA$
\end_inset


\end_layout

\begin_layout Standard

\emph on
Higher-order constraints
\emph default
 involve 3 or more variables:
\end_layout

\begin_layout Itemize
e.g., 
\begin_inset Formula $Alldiff(WA,NT,SA)$
\end_inset


\end_layout

\begin_layout Standard

\emph on
Preferences
\emph default
 (soft constraints):
\end_layout

\begin_layout Itemize
e.g., 
\begin_inset Formula $red$
\end_inset

 is better than 
\begin_inset Formula $green$
\end_inset


\end_layout

\begin_layout Itemize
often representable by a cost for each variable assignment
\end_layout

\end_deeper
\begin_layout Separator
\begin_inset Note Note
status open

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Real-world CSPs
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
Assignment problems
\end_layout

\begin_layout Itemize
e.g., who teaches what class?
\end_layout

\begin_layout Plain Layout
Timetabling problems 
\end_layout

\begin_layout Itemize
e.g., which class is offered when and where? 
\end_layout

\begin_layout Plain Layout
Hardware configuration
\end_layout

\begin_layout Plain Layout
Spreadsheets
\end_layout

\begin_layout Plain Layout
Transportation scheduling
\end_layout

\begin_layout Plain Layout
Factory scheduling
\end_layout

\begin_layout Plain Layout
Floorplanning
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\end_inset


\end_layout

\begin_layout Section
Soving CSPs using search 
\end_layout

\begin_layout Subsection
Russell & Norvig 6.3--6.3.2, Poole & Mackworth 4.3--4.4
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Generate-and-test algorithm
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Generate the assignment space 
\begin_inset Formula ${\D}=\D_{V_{1}}\times\D_{V_{2}}\times\ldots\times\D_{V_{n}}$
\end_inset

.
 Test each assignment with the constraints.
 
\end_layout

\begin_layout Itemize

\emph on
Example
\emph default
: 
\begin_inset Formula 
\begin{eqnarray*}
{\D} & = & \D_{A}\times\D_{B}\times\D_{C}\times\D_{D}\times\D_{E}\\
 & = & \{1,2,3,4\}\times\{1,2,3,4\}\times\{1,2,3,4\}\\
 &  & \times\{1,2,3,4\}\times\{1,2,3,4\}\\
 & = & \{\tuple{1,1,1,1,1},\tuple{1,1,1,1,2},...,\tuple{4,4,4,4,4}\}.
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Itemize
How many assignments need to be tested for 
\begin_inset Formula $n$
\end_inset

 variables 
\begin_inset Newline newline
\end_inset

each with domain size 
\begin_inset Formula $d$
\end_inset

? 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
CSP as a search problem
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Let's start with the straightforward, dumb approach.
\end_layout

\begin_layout Standard
States are defined by the values assigned so far:
\end_layout

\begin_layout Itemize
Initial
\begin_inset space ~
\end_inset

state: the empty assignment, 
\begin_inset Formula $\{\}$
\end_inset


\end_layout

\begin_layout Itemize
Successor
\begin_inset space ~
\end_inset

function: assign a value to an unassigned variable 
\begin_inset Newline newline
\end_inset

that does not conflict with current assignment 
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\Longrightarrow$
\end_inset

 fail if there are no legal assignments
\end_layout

\begin_layout Itemize
Goal
\begin_inset space ~
\end_inset

test: the current assignment is complete
\end_layout

\begin_layout Standard
Every solution appears at depth 
\begin_inset Formula $n$
\end_inset

 (assuming 
\begin_inset Formula $n$
\end_inset

 variables)
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\Longrightarrow$
\end_inset

 we can use depth-first-search
\end_layout

\begin_layout Standard
At depth 
\begin_inset Formula $l$
\end_inset

, 
\begin_inset Formula $b=(n-l)d$
\end_inset

, where 
\begin_inset Formula $d$
\end_inset

 is the domain size
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\Longrightarrow$
\end_inset

 hence there are 
\begin_inset Formula $n!d{}^{n}$
\end_inset

 leaves!
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Backtracking search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Variable assignments are 
\emph on
commutative
\emph default
, i.e.:
\end_layout

\begin_layout Itemize
\begin_inset Formula $[WA=red,NT=green]$
\end_inset

 is the same as 
\begin_inset Formula $[NT=green,WA=red]$
\end_inset


\end_layout

\begin_layout Standard
We only need to assign a single variable at each node:
\end_layout

\begin_layout Itemize
i.e., 
\begin_inset Formula $b=d$
\end_inset

, so there are 
\begin_inset Formula $d^{n}$
\end_inset

leaves (instead of 
\begin_inset Formula $n!d^{n}$
\end_inset

)
\end_layout

\begin_layout Standard
Depth-first search for CSPs with single-variable assignments is called 
\emph on
backtracking search
\emph default
:
\end_layout

\begin_layout Itemize
backtracking search is the basic uninformed CSP algorithm
\end_layout

\begin_layout Itemize
it can solve 
\begin_inset Formula $n$
\end_inset

-queens for 
\begin_inset Formula $n\approx25$
\end_inset


\end_layout

\begin_layout Itemize
why not use breadth-first search?
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Simple backtracking example
\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_deeper
\begin_layout Standard
Variables: 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

.
 Domains: 
\begin_inset Formula $\D_{A}=\D_{B}=\D_{C}=\{1,2,3,4\}$
\end_inset

.
\end_layout

\begin_layout Standard
Constraints: 
\begin_inset Formula $(A<B)\AND(B<C)$
\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch06/CSP-tree.pdf
	width 80text%

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Australia map colours
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
only<1>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/backtrack-progress1c.pdf
	width 90text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<2>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/backtrack-progress2c.pdf
	width 90text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<3>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/backtrack-progress3c.pdf
	width 90text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<4>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/backtrack-progress4c.pdf
	width 90text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Algorithm for backtracking search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{pcode}
\end_layout

\end_inset


\series bold
function
\series default
 BacktrackingSearch(
\emph on
csp
\emph default
):
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\series bold
return
\series default
 Backtrack(
\begin_inset Formula $\{\}$
\end_inset

, 
\emph on
csp
\emph default
)
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{pcode}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
begin{pcode}
\end_layout

\end_inset


\series bold
function
\series default
 Backtrack(
\emph on
assignment, csp
\emph default
):
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\series bold
if
\series default
\emph on
 assignment
\emph default
 is complete
\series bold
 then return
\series default
 
\emph on
assignment
\series bold
\emph default

\begin_inset Newline newline
\end_inset


\series default

\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\emph on
var
\emph default
 := 
\color magenta
SelectUnassignedVariable
\color inherit
(
\emph on
assignment, csp
\emph default
)
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\series bold
for each
\series default
 
\emph on
value
\emph default
 
\series bold
in
\series default
 
\color magenta
OrderDomainValues
\color inherit
(
\emph on
var, assignment, csp
\emph default
):
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\series bold
if
\series default
 
\emph on
value
\emph default
 is consistent with 
\emph on
assignment
\series bold
\emph default
 then:
\series default

\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\series bold
add 
\series default
\emph on

\begin_inset Formula $\{var=value\}$
\end_inset


\emph default
 
\series bold
to
\series default
 
\emph on
assignment
\emph default

\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\emph on
inferences
\emph default
 := 
\color magenta
Inference
\color inherit
(
\emph on
csp, var, value
\emph default
)
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\series bold
if
\series default
 
\emph on
inferences 
\begin_inset Formula $\neq$
\end_inset

 failure
\emph default
 
\series bold
then:
\series default

\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\series bold
add 
\series default
\emph on
inferences
\emph default
 
\series bold
to
\series default
 
\emph on
assignment
\emph default

\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\emph on
result
\emph default
 := Backtrack(
\emph on
assignment, csp
\emph default
)
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\series bold
if
\series default
 
\emph on
result 
\begin_inset Formula $\neq$
\end_inset

 failure
\emph default
 
\series bold
then
\series default
 
\series bold
return
\series default
 
\emph on
result
\emph default

\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\series bold
remove 
\series default
\emph on

\begin_inset Formula $\{var=value\}$
\end_inset

 
\emph default
and
\emph on
 inferences
\emph default
 
\series bold
from
\series default
 
\emph on
assignment
\emph default

\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
>
\end_layout

\end_inset


\series bold
return 
\series default
\emph on
failure
\emph default
 
\begin_inset Newline newline
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
end{pcode}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Improving backtracking efficiency
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The general-purpose algorithm gives rise to several questions:
\end_layout

\begin_layout Itemize
Which variable should be assigned next? 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
color{magenta}
\end_layout

\end_inset

SelectUnassignedVariable(
\emph on
assignment, csp
\emph default
)
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
In what order should its values be tried? 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
color{magenta}
\end_layout

\end_inset

OrderDomainValues(
\emph on
var, assignment, csp
\emph default
)
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
What inferences should be performed at each step? 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\backslash
color{magenta}
\end_layout

\end_inset

Inference(
\emph on
csp, var, value
\emph default
)
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Can the search avoid repeating failures? 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

intelligent
\begin_inset Quotes erd
\end_inset

 backtracking (R&N 6.3.3, not covered in this course)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Selecting unassigned variables
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Heuristics for selecting the next unassigned variable:
\end_layout

\begin_layout Itemize
Minimum remaining values (MRV):
\end_layout

\begin_deeper
\begin_layout Itemize
choose the variable with the fewest legal values
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
uncover<2->{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/australia-most-constrained-variable.pdf
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Degree heuristic (if there are several MRV variables):
\end_layout

\begin_deeper
\begin_layout Itemize
choose the variable with most constraints on remaining variables
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
uncover<3->{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/australia-most-constraining-variable.pdf
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Ordering domain values
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Heuristics for ordering the values of a selected variable:
\end_layout

\begin_layout Itemize
Least constraining value:
\end_layout

\begin_deeper
\begin_layout Itemize
prefer the value that rules out the fewest choices 
\begin_inset Newline newline
\end_inset

for the neighboring variables in the constraint graph
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
uncover<2->{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/australia-least-constraining-value.pdf
	width 90text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Inference: Forward checking
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace -5mm
\end_inset

Forward checking is a simple form of inference.
 
\end_layout

\begin_layout Itemize
Keep track of remaining legal values for unassigned variables 
\begin_inset Newline newline
\end_inset

-- terminate when any variable has no legal values left
\end_layout

\begin_layout Itemize
When a new variable is assigned, 
\begin_inset Newline newline
\end_inset

recalculate the legal values for its neighboring variables
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{overlayarea}{
\backslash
textwidth}{2cm}
\backslash
begin{center}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
only<2>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/forward-checking-progress1c.pdf
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<3>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/forward-checking-progress2c.pdf
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<4>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/forward-checking-progress3c.pdf
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<5>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/forward-checking-progress4c.pdf
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\backslash
end{overlayarea}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Inference: Constraint propagation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Forward checking propagates information from assigned to unassigned variables,
 but doesn't provide early detection for all failures:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch06/forward-checking-progress3c.pdf
	width 70text%

\end_inset


\end_layout

\begin_layout Standard

\emph on
NT
\emph default
 and 
\emph on
SA
\emph default
 cannot both be blue!
\end_layout

\begin_layout Itemize

\emph on
Constraint propagation
\emph default
 repeatedly enforces constraints locally
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Inference: Arc consistency
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The simplest form of propagation is to make each arc 
\emph on
consistent
\emph default
:
\end_layout

\begin_layout Itemize
\begin_inset Formula $X\rightarrow Y$
\end_inset

 is consistent iff
\end_layout

\begin_deeper
\begin_layout Itemize
for 
\emph on
every
\emph default
 value 
\begin_inset Formula $x$
\end_inset

 of 
\begin_inset Formula $X$
\end_inset

, there is 
\emph on
some
\emph default
 allowed value 
\begin_inset Formula $y$
\end_inset

 in 
\begin_inset Formula $Y$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{overlayarea}{
\backslash
textwidth}{2cm}
\backslash
begin{center}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
only<1>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/ac-example0c.png
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<2>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/ac-example1c.pdf
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<3>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/ac-example2c.pdf
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<4>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/ac-example3c.pdf
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<5>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch06/ac-example4c.pdf
	width 70text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{center}
\backslash
end{overlayarea}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause 
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause 
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause 
\end_layout

\end_inset

If 
\begin_inset Formula $X$
\end_inset

 loses a value, neighbors of 
\begin_inset Formula $X$
\end_inset

 need to be rechecked
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause 
\end_layout

\end_inset

Arc consistency detects failure earlier than forward checking
\end_layout

\end_deeper
\begin_layout Section
Constraint progagation 
\end_layout

\begin_layout Subsection
Russell & Norvig 6.2--6.2.2, Poole & Mackworth 4.5--4.6
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Consistency
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A variable is 
\emph on
node-consistent
\emph default
 if all values in its domain satisfy 
\begin_inset Newline newline
\end_inset

its own unary constraints.
\end_layout

\begin_deeper
\begin_layout Itemize
(Poole & Mackworth uses the term 
\emph on
domain-consistent
\emph default
)
\end_layout

\end_deeper
\begin_layout Itemize
A variable is 
\emph on
arc-consistent
\emph default
 if every value in its domain satisfies the variable's binary constraints.
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
generalised arc-consistency
\emph default
 is the same, but for 
\begin_inset Formula $n$
\end_inset

-ary constraints
\end_layout

\end_deeper
\begin_layout Itemize
There are also path consistency, 
\begin_inset Formula $k$
\end_inset

-consistency and general global constraints (R&N 6.2.3--6.2.5, not covered in
 this course)
\end_layout

\begin_layout Itemize
A network is 
\begin_inset Formula $X$
\end_inset

-consistent if every variable is 
\begin_inset Formula $X$
\end_inset

-consistent 
\begin_inset Newline newline
\end_inset

with every other variable.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Scheduling example (again)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Variables: 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

, 
\begin_inset Formula $D$
\end_inset

, 
\begin_inset Formula $E$
\end_inset

 
\begin_inset Newline newline
\end_inset

representing the starting times of various activities.
 
\end_layout

\begin_layout Description
Domains: 
\begin_inset Formula $\D_{A}=\D_{B}=\D_{C}=\D_{D}=\D_{E}=\{1,2,3,4\}$
\end_inset

 
\end_layout

\begin_layout Description
Constraints: 
\begin_inset Formula $(B\neq3)\AND(C\neq2)\AND(A\neq B)\AND(B\neq C)\AND$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $(C<D)\AND(A=D)\AND(E<A)\AND(E<B)\AND$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $(E<C)\AND(E<D)\AND(B\neq D)$
\end_inset


\end_layout

\begin_layout Standard
Is this example 
\emph on
node consistent
\emph default
? 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\D_{B}=\{1,2,3,4\}$
\end_inset

 is 
\emph on
not
\emph default
 node consistent, 
\begin_inset Newline newline
\end_inset

since 
\begin_inset Formula $B=3$
\end_inset

 violates the constraint 
\begin_inset Formula $B\neq3$
\end_inset

.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\D_{C}=\{1,2,3,4\}$
\end_inset

 is 
\emph on
not
\emph default
 node consistent, 
\begin_inset Newline newline
\end_inset

since 
\begin_inset Formula $C=2$
\end_inset

 violates the constraint 
\begin_inset Formula $C\neq2$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Scheduling example as a constraint graph
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename figures/ch06/ConstraintNetwork1.pdf
	width 80text%

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Arc consistency
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A binary arc 
\begin_inset Formula $(X,Y)$
\end_inset

 is arc-consistent if:
\end_layout

\begin_deeper
\begin_layout Itemize
for each value 
\begin_inset Formula $x\in\D_{X}$
\end_inset

, there is some 
\begin_inset Formula $y\in\D_{Y}$
\end_inset

 such that 
\begin_inset Newline newline
\end_inset

the constraint 
\begin_inset Formula $r(x,y)$
\end_inset

 is satisfied.
 
\end_layout

\end_deeper
\begin_layout Itemize
More generally, an arc 
\begin_inset Formula $(X,Y,Z,\dots)$
\end_inset

 is arc-consistent if:
\end_layout

\begin_deeper
\begin_layout Itemize
for each value 
\begin_inset Formula $x\in\D_{X}$
\end_inset

, there is some assignment 
\begin_inset Formula $y,z,\dots\in\D_{Y},\D_{Z},\dots$
\end_inset

 such that 
\begin_inset Formula $r(x,y,z,\dots)$
\end_inset

 is satisfied.
 
\end_layout

\end_deeper
\begin_layout Itemize
What if arc 
\begin_inset Formula $(X,Y)$
\end_inset

 is 
\emph on
not
\emph default
 arc consistent?
\end_layout

\begin_deeper
\begin_layout Itemize
all values 
\begin_inset Formula $x\in\D_{X}$
\end_inset

 for which there is no corresponding 
\begin_inset Formula $y\in\D_{Y}$
\end_inset

 can be deleted from 
\begin_inset Formula $\D_{X}$
\end_inset

 to make the arc consistent.
 
\end_layout

\end_deeper
\begin_layout Standard

\emph on
Note
\emph default
! The arcs in a constraint graph are 
\emph on
directed
\emph default
 --
\begin_inset Newline newline
\end_inset


\begin_inset Formula $(X,Y)$
\end_inset

 and 
\begin_inset Formula $(Y,X)$
\end_inset

 are considered as two different arcs
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Arc consistency algorithm
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The arcs can be considered in turn making each arc consistent.
 
\end_layout

\begin_layout Itemize
When an arc has been made arc consistent, does it ever need to be checked
 again? 
\end_layout

\begin_deeper
\begin_layout Itemize
An arc 
\begin_inset Formula $(X,Y)$
\end_inset

 needs to be revisited if the domain of 
\begin_inset Formula $Y$
\end_inset

 is revised.
 
\end_layout

\end_deeper
\begin_layout Itemize
Three possible outcomes when all arcs are made arc consistent: (Is there
 a solution?) 
\end_layout

\begin_deeper
\begin_layout Itemize
One domain is empty 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
barrow
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
uncover
\end_layout

\end_inset

<2->
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

no solution
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
Each domain has a single value 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
barrow
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
uncover
\end_layout

\end_inset

<2->
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

unique solution
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
Some domains have more than one value 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
barrow
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
uncover
\end_layout

\end_inset

<2->
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

there may or may not be a solution
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Quiz: Arc consistency
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The variables and constraints are in the constraint graph:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch06/abccsp.pdf
	width 60text%

\end_inset


\end_layout

\begin_layout Standard
Assume the initial domains are 
\begin_inset Formula $\D_{A}=\D_{B}=\D_{C}=\{1,2,3,4\}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
How will the domains look like after making the graph arc consistent?
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Note: AC in Russell&Norvig vs Poole&Mackworth
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
R&N and P&M have different formulations of the AC algorithm:
\end_layout

\begin_layout Itemize
For R&N, the arcs in the constraint graph are between variables, and they
 are labeled with the constraints.
\end_layout

\begin_deeper
\begin_layout Itemize
i.e., constraints are labels, 
\emph on
not
\emph default
 nodes
\end_layout

\begin_layout Itemize
the 
\emph on
ABC
\emph default
 graph below has 3 nodes and 4 labeled arcs 
\begin_inset Newline newline
\end_inset

(one arc in each direction)
\end_layout

\end_deeper
\begin_layout Itemize
For P&M, the constraint graph has two kinds of nodes: 
\begin_inset Newline newline
\end_inset

variables and constraints
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
Pro
\emph default
: it can handle general 
\begin_inset Formula $n$
\end_inset

-ary constraints (not just binary)
\end_layout

\begin_layout Itemize

\emph on
Con
\emph default
: the graph data structure becomes more complex
\end_layout

\begin_layout Itemize
the 
\emph on
ABC
\emph default
 graph below has 5 nodes and 4 unlabeled arcs
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch06/abccsp.pdf
	width 60text%

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Maintaining arc-consistency
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
What if some domains have more than one element after AC? 
\end_layout

\begin_layout Itemize
We can always resort to backtracking search
\end_layout

\begin_layout Itemize
Select a variable and a value using, e.g., MRV, degree heuristic, least constraini
ng value
\end_layout

\begin_layout Itemize
Make the graph arc-consistent again
\end_layout

\begin_layout Itemize
Backtrack and try new values/variables, if AC fails
\end_layout

\begin_layout Itemize
Select a new variable/value, perform arc-consistency, etc.
\end_layout

\begin_layout Standard
Do we need to restart AC from scratch? 
\end_layout

\begin_layout Itemize
no, only some arcs risk becoming inconsistent after 
\begin_inset Newline newline
\end_inset

the assignment of a new variable
\end_layout

\begin_layout Itemize
R&N calls this 
\emph on
Maintaining Arc Consistency
\emph default
 (MAC)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Domain splitting
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
What if some domains are very big?
\end_layout

\begin_layout Itemize
Instead of trying to assign every possible value to a variable, 
\begin_inset Newline newline
\end_inset

we can split its domain
\end_layout

\begin_layout Itemize
Split one of the domains, then recursively solve each half
\end_layout

\begin_deeper
\begin_layout Itemize
i.e., perform AC on the resulting graph, then split a domain, perform AC,
 split a domain, perform AC, split, etc.
\end_layout

\end_deeper
\begin_layout Itemize
It is often best to split a domain in half
\end_layout

\begin_deeper
\begin_layout Itemize
i.e., if 
\begin_inset Formula $\D_{X}=\{1,\dots,1000\}$
\end_inset

, 
\begin_inset Newline newline
\end_inset

we can split into 
\begin_inset Formula $\{1,\dots500\}$
\end_inset

 and 
\begin_inset Formula $\{501,\dots,1000$
\end_inset

}
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Problem structure
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align right
\begin_inset VSpace -10mm
\end_inset


\begin_inset Graphics
	filename figures/ch06/australia-csp.pdf
	width 40text%

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace -35mm
\end_inset

Tasmania and mainland are 
\emph on
independent 
\begin_inset Newline newline
\end_inset

subproblems
\emph default
 -- identifiable as 
\emph on
connected 
\begin_inset Newline newline
\end_inset

components
\emph default
 of the constraint graph.
\end_layout

\begin_layout Standard
Suppose that each subproblem has 
\begin_inset Formula $c$
\end_inset

 variables 
\begin_inset Newline newline
\end_inset

out of 
\begin_inset Formula $n$
\end_inset

 total.
 The worst-case solution cost 
\begin_inset Newline newline
\end_inset

is 
\begin_inset Formula $n/c\cdot d^{c}$
\end_inset

, which is 
\emph on
linear
\emph default
 in 
\begin_inset Formula $n$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause 
\end_layout

\end_inset

E.g., 
\begin_inset Formula $n=80$
\end_inset

, 
\begin_inset Formula $d=2$
\end_inset

, 
\begin_inset Formula $c=20$
\end_inset

:
\end_layout

\begin_layout Itemize
\begin_inset Formula $2^{80}=4$
\end_inset

 billion years at 10 million nodes/sec
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause 
\end_layout

\end_inset

If we divide it into 4 equal-size subproblems:
\end_layout

\begin_layout Itemize
\begin_inset Formula $4\cdot2^{20}=0.4$
\end_inset

 seconds at 10 million nodes/sec 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Subsection
Variable elimination (4.7)
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variable elimination
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
Complementary simplification methods:
\end_layout

\begin_layout Itemize
Arc consistency (AC) simplifies the network 
\begin_inset Newline newline
\end_inset

by removing values of variables.
 
\end_layout

\begin_layout Itemize
Variable elimination (VE) simplifies the network 
\begin_inset Newline newline
\end_inset

by removing variables.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variable elimination algorithm
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
Variable elimination algorithm: 
\end_layout

\begin_layout Itemize
Select a variable 
\begin_inset Formula $X$
\end_inset

 to eliminate.
\end_layout

\begin_deeper
\begin_layout Itemize
Remove 
\begin_inset Formula $X$
\end_inset

 by constructing a new constraint on all variables 
\begin_inset Newline newline
\end_inset

that occur in some 
\begin_inset Formula $X$
\end_inset

 constraint.
\end_layout

\begin_layout Itemize
This new constraint replaces all constraints that involve 
\begin_inset Formula $X$
\end_inset

, forming a reduced network that does not involve 
\begin_inset Formula $X$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Itemize
The variables are eliminated according to some 
\emph on

\begin_inset Newline newline
\end_inset

elimination ordering:
\end_layout

\begin_deeper
\begin_layout Itemize
Different elimination orderings can result in different 
\begin_inset Newline newline
\end_inset

intermediate constraints.
 
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
The new constraint is constructed so that any solution to the reduced CSP
 can be extended to a solution of the larger CSP that contains X.
 In addition to creating the new constraint, VE provides a way to construct
 a solution to the CSP that contains X from a solution to the reduced CSP.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variable elimination
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Idea: eliminate the variables one-by-one passing their constraints to their
 neighbours 
\end_layout

\begin_layout Plain Layout
Variable Elimination Algorithm: 
\end_layout

\begin_layout Itemize
If there is only one variable, return the intersection of the (unary) constraint
s that contain it 
\end_layout

\begin_layout Itemize
Select a variable 
\begin_inset Formula $X$
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Join the constraints in which 
\begin_inset Formula $X$
\end_inset

 appears, forming constraint 
\begin_inset Formula $R_{1}$
\end_inset

 
\end_layout

\begin_layout Itemize
Project 
\begin_inset Formula $R_{1}$
\end_inset

 onto its variables other than 
\begin_inset Formula $X$
\end_inset

, forming 
\begin_inset Formula $R_{2}$
\end_inset

 
\end_layout

\begin_layout Itemize
Replace all of the constraints in which 
\begin_inset Formula $X_{i}$
\end_inset

 appears by 
\begin_inset Formula $R_{2}$
\end_inset

 
\end_layout

\begin_layout Itemize
Recursively solve the simplified problem, forming 
\begin_inset Formula $R_{3}$
\end_inset

 
\end_layout

\begin_layout Itemize
Return 
\begin_inset Formula $R_{1}$
\end_inset

 joined with 
\begin_inset Formula $R_{3}$
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\end_inset


\end_layout

\begin_layout Separator
\begin_inset Note Note
status open

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variable elimination (cont.)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
When there is a single variable remaining, if it has no values, the network
 was inconsistent.
 
\end_layout

\begin_layout Itemize
The variables are eliminated according to some 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hilitec
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

elimination ordering
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
Different elimination orderings result in different size intermediate constraint
s.
 
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example network
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/ch06/abcdecsp.pdf
	width 80text%

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Arc-consistent network
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/ch06/abcdecspac.pdf
	width 80text%

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Eliminating variable 
\begin_inset Formula $C$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Constraints: 
\begin_inset Formula $E\neq C$
\end_inset

 and 
\begin_inset Formula $D<C$
\end_inset

.
 
\end_layout

\begin_layout Description
Domains: 
\begin_inset Formula $\D_{C}=\{3,4\}$
\end_inset

, 
\begin_inset Formula $\D_{D}=\{2,3\}$
\end_inset

, 
\begin_inset Formula $\D_{E}=\{2,3,4\}$
\end_inset

.
\end_layout

\begin_layout Plain Layout
\noindent
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
def
\backslash
arraystretch{0.8}
\end_layout

\end_inset


\size small

\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features rotate="0" tabularvalignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $r_{1}:E\neq C$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $C$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $E$
\end_inset

 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
def
\backslash
arraystretch{0.8}
\end_layout

\end_inset


\size small

\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features rotate="0" tabularvalignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $r_{2}:D<C$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $C$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $D$
\end_inset

 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
def
\backslash
arraystretch{0.8}
\end_layout

\end_inset


\size small

\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features rotate="0" tabularvalignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $r_{3}:r_{1}\bowtie r_{2}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $C$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $D$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $E$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(join 
\begin_inset Formula $r_{1}$
\end_inset

, 
\begin_inset Formula $r_{2}$
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
def
\backslash
arraystretch{0.8}
\end_layout

\end_inset


\size small

\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features rotate="0" tabularvalignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $r_{4}:\pi_{\{D,E\}}r_{3}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $D$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $E$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(project 
\begin_inset Formula $r_{3}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="right" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
onto 
\begin_inset Formula $D,E$
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula ${\color{red}\hookrightarrow}$
\end_inset


\size default
 new constraint
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Resulting network after eliminating 
\begin_inset Formula $C$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/ch06/abcdecspElimC.pdf
	width 80text%

\end_inset

 
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Section
Local search for CSPs
\end_layout

\begin_layout Subsection
Russell & Norvig 6.4, Poole & Mackworth 4.8.1
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Local search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
Local search / Greedy descent: 
\end_layout

\begin_layout Itemize
Maintain an assignment of a value to each variable 
\end_layout

\begin_layout Itemize
Repeat until a satisfying assignment is found: 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
Select a variable to change 
\end_layout

\begin_layout Itemize
Select a new value for that variable 
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

% At each step, select a ``neighbor'' of the current assignment
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%  (e.g., one that improves some heuristic value).
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%Requires:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item What is a neighbor?
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item Which neighbor should be selected?
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%(Some methods maintain multiple assignments.)
\end_layout

\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Local search for CSPs
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Given an assignment of a value to each variable:
\end_layout

\begin_layout Itemize
A 
\emph on
conflict
\emph default
 is an unsatisfied constraint.
 
\end_layout

\begin_layout Itemize
The goal is an assignment with zero conflicts.
 
\end_layout

\begin_layout Standard
Local search / Greedy descent algorithm: 
\end_layout

\begin_layout Itemize
Repeat until a satisfying assignment is found: 
\end_layout

\begin_deeper
\begin_layout Itemize
Select a variable to change 
\end_layout

\begin_layout Itemize
Select a new value for that variable 
\end_layout

\end_deeper
\begin_layout Itemize
Heuristic function to be minimized: the number of conflicts.
 
\end_layout

\begin_deeper
\begin_layout Itemize
this is the 
\emph on
min-conflicts
\emph default
 heuristic in Russell & Norvig, 6.4
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
Note
\emph default
: this does not always work! -- 
\emph on
local minimum
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: 
\begin_inset Formula $n$
\end_inset

-queens (revisited)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Do you remember this example?
\end_layout

\begin_layout Itemize
Put 
\begin_inset Formula $n$
\end_inset

 queens on an 
\begin_inset Formula $n\times n$
\end_inset

 board, in separate columns
\end_layout

\begin_layout Itemize
Conflicts = unsatisfied constraints = threatened queens
\end_layout

\begin_layout Itemize
Move a queen to reduce the number of conflicts;
\begin_inset Newline newline
\end_inset

 repeat until we cannot move any queen anymore
\end_layout

\begin_deeper
\begin_layout Itemize
then we are at a local maximum, hopefully it is global too
\end_layout

\end_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch04/4queens-iterative.pdf
	width 70text%

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variants of greedy descent 
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
To choose a variable to change and a new value for it: 
\end_layout

\begin_layout Itemize
Find a variable-value pair that minimizes the number of conflicts 
\end_layout

\begin_layout Itemize
Select a variable that participates in the most conflicts.
 
\begin_inset Newline newline
\end_inset

 Select a value that minimizes the number of conflicts.
 
\end_layout

\begin_layout Itemize
Select a variable that appears in any conflict.
\begin_inset Newline newline
\end_inset

 Select a value that minimizes the number of conflicts.
 
\end_layout

\begin_layout Itemize
Select a variable at random.
 
\begin_inset Newline newline
\end_inset

 Select a value that minimizes the number of conflicts.
 
\end_layout

\begin_layout Itemize
Select a variable and value at random; 
\begin_inset Newline newline
\end_inset

accept this change if it doesn't increase the number of conflicts.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\end_body
\end_document
