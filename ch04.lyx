#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usepackage{cibeamer}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref false
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%% Lecture for Artificial Intelligence, Chapter 4, http://artint.info 
\end_layout

\begin_layout Plain Layout

%% Copyright David L.
 Poole and Alan K.
 Mackworth, 2010-2013
\end_layout

\begin_layout Plain Layout

%% Copyright Peter Ljunglöf, 2015
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%% This work is licensed under CC BY-NC-SA 4.0, the Creative Commons
\end_layout

\begin_layout Plain Layout

%% Attribution-NonCommercial-ShareAlike 4.0 International License.
 
\end_layout

\begin_layout Plain Layout

%% To view a copy of this license: http://creativecommons.org/licenses/by-nc-sa/4.
0/
\end_layout

\end_inset


\end_layout

\begin_layout Title (Plain Frame)
Chapters 4: Features and Constraints
\end_layout

\begin_layout Subtitle
DIT410/TIN172 Artificial Intelligence
\end_layout

\begin_layout Author
\begin_inset Argument 1
status open

\begin_layout Plain Layout
Peter Ljunglöf
\end_layout

\end_inset

Peter Ljunglöf
\begin_inset Newline newline
\end_inset

 modifed from slides by Poole & Mackworth
\begin_inset Newline newline
\end_inset

with some help from slides by Russel & Norvig
\begin_inset Newline newline
\end_inset


\size footnotesize

\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

(Licensed under Creative Commons BY-NC-SA v4.0)
\end_layout

\begin_layout Date
31 March, 2015
\end_layout

\begin_layout PlainFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Outline
\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

  
\backslash
begin{frame}<beamer>[plain]{Outline}
\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection]
\end_layout

\begin_layout Plain Layout

  
\backslash
end{frame}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Features and constraints
\end_layout

\begin_layout Subsection
States, features and constraints (4.1--4.2)
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Learning Objectives
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
At the end of the class you should be able to: 
\end_layout

\begin_layout Itemize
recognize and represent constraint satisfaction problems 
\end_layout

\begin_layout Itemize
show how constraint satisfaction problems can be solved with search 
\end_layout

\begin_layout Itemize
implement and trace arc-consistency of a constraint graph 
\end_layout

\begin_layout Itemize
show how domain splitting can solve constraint problems 
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
States and features
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
States can often be described in terms of features: 
\end_layout

\begin_layout Itemize
States can be defined in terms of features: a state corresponds to an assignment
 of a value to each feature.
 
\end_layout

\begin_layout Itemize
Features can be defined in terms of states: a feature is a function of the
 states.
 The function returns the value of the feature on that state.
 
\end_layout

\begin_layout Itemize
Features are described by variables.
 
\end_layout

\begin_layout Itemize
Not all assignments of values to variables are possible.
 
\end_layout

\begin_layout Standard

\emph on
Examples:
\emph default
 8-queens, crossword puzzle, course timetable.
\end_layout

\begin_layout Standard

\emph on
More difficult:
\emph default
 8-puzzle, driving directions.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
States and features
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Just a few features can describe many states:
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $n$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
binary features can describe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $2^{n}$
\end_inset


\size default
 
\begin_inset space ~
\end_inset

 states
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
binary features can describe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $2^{10}$
\end_inset

 
\begin_inset space ~
\end_inset

= 1,024
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
binary features can describe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $2^{20}$
\end_inset

 
\begin_inset space ~
\end_inset

= 1,048,576
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
binary features can describe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $2^{30}$
\end_inset

 
\begin_inset space ~
\end_inset

= 1,073,741,824
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
binary features can describe
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $2^{100}$
\end_inset

 = 1,267,650,600,228,229,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

401,496,703,205,376
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Constraint satisfaction problem
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Standard search problem:
\end_layout

\begin_layout Itemize
the 
\begin_inset Flex Alert
status open

\begin_layout Plain Layout
state
\end_layout

\end_inset

 is a 
\begin_inset Quotes eld
\end_inset

black box
\begin_inset Quotes erd
\end_inset

 -- any old data structure that supports goal test, cost evaluation, successor
\end_layout

\begin_layout Standard
CSP is a more specific search problem:
\end_layout

\begin_layout Itemize
the 
\begin_inset Flex Alert
status open

\begin_layout Plain Layout
state
\end_layout

\end_inset

 is defined by 
\emph on
variables
\emph default
 
\begin_inset Formula $V_{i}$
\end_inset

, taking 
\emph on
values
\emph default
 from 
\emph on
domain
\emph default

\begin_inset space ~
\end_inset


\begin_inset Formula $\D_{i}$
\end_inset


\end_layout

\begin_layout Itemize
the 
\begin_inset Flex Alert
status open

\begin_layout Plain Layout
goal test
\end_layout

\end_inset

 is a set of 
\emph on
constraints
\emph default
 specifying allowable combinations of values for subsets of variables
\end_layout

\begin_layout Standard

\emph on
\begin_inset Note Note
status open

\begin_layout Plain Layout
Simple example of a 
\emph on
formal representation language
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since CSP is more specific, it allows useful algorithms with more power
 than standard search algorithms 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Hard and soft constraints
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item 
\backslash
hiliteb{Multi-dimensional Selection Problems}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Given a set of variables, assign a value to each variable that either 
\end_layout

\begin_layout Itemize
satisfies some set of constraints: 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

satisfiability problems
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 --- 
\begin_inset Quotes eld
\end_inset

hard constraints
\begin_inset Quotes erd
\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
minimizes some cost function, where each assignment of values to
\begin_inset space ~
\end_inset

variables has some cost: 
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

optimization problems
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 --- 
\begin_inset Quotes eld
\end_inset

soft constraints
\begin_inset Quotes erd
\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
Many problems are a mix of hard and soft constraints
\begin_inset Newline newline
\end_inset

 (called constrained optimization problems)
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Relationship to search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Differences to general search problems:
\end_layout

\begin_layout Itemize
The path to a goal isn't important, only the solution is.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Many algorithms exploit the multi-dimensional nature of the problems.
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
There are no predefined starting nodes.
\end_layout

\begin_layout Itemize
Often these problems are huge, with thousands of variables, 
\begin_inset Newline newline
\end_inset

so systematically searching the space is infeasible.
 
\end_layout

\begin_layout Itemize
For optimization problems, there are no well-defined goal nodes.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Posing a CSP
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A CSP is characterized by 
\end_layout

\begin_layout Itemize
A set of variables 
\begin_inset Formula $V_{1},V_{2},\ldots,V_{n}$
\end_inset

.
 
\end_layout

\begin_layout Itemize
Each variable 
\begin_inset Formula $V_{i}$
\end_inset

 has an associated domain 
\begin_inset Formula $\D_{V_{i}}$
\end_inset

 of possible values.
 
\end_layout

\begin_layout Itemize
There are hard constraints on various subsets of the variables which specify
 legal combinations of values for these variables.
 
\end_layout

\begin_layout Itemize
A solution to the CSP is an assignment of a value to each variable that
 satisfies all the constraints.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item For optimization problems there is a function that gives a cost
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%for each assignment of a value to each variable.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item A solution is an
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%assignment of values to the variables that minimizes the cost function.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Scheduling activities
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Variables: 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

, 
\begin_inset Formula $D$
\end_inset

, 
\begin_inset Formula $E$
\end_inset

 that represent the starting times of various activities.
 
\end_layout

\begin_layout Description
Domains: 
\begin_inset Formula $\D_{A}=\D_{B}=\D_{C}=\D_{D}=\D_{E}=\{1,2,3,4\}$
\end_inset

 
\end_layout

\begin_layout Description
Constraints: 
\begin_inset Formula 
\begin{eqnarray*}
\lefteqn{(B\neq3)\AND(C\neq2)\AND(A\neq B)\AND(B\neq C)\AND}\\
 &  & (C<D)\AND(A=D)\AND(E<A)\AND(E<B)\AND\\
 &  & (E<C)\AND(E<D)\AND(B\neq D)
\end{eqnarray*}

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Crossword puzzle
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Graphics
	filename figures/ch04/crossword1.pdf
	width 40text%

\end_inset


\begin_inset space \hspace{}
\length 1em
\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="1">
<features rotate="0" tabularvalignment="bottom">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Words:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ant, big, bus, car, has 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
book, buys, hold,
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lane, year
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
beast, ginger, search, 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
symbol, syntax
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="none" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="none" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="none" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Constraint satisfaction revisited
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
A 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Constraint Satisfaction Problem
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 consists of: 
\end_layout

\begin_deeper
\begin_layout Itemize
a set of variables 
\end_layout

\begin_layout Itemize
a set of possible values, a 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

domain
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 for each variable 
\end_layout

\begin_layout Itemize
a set of constraints amongst subsets of the variables 
\end_layout

\end_deeper
\begin_layout Itemize
The aim is to find a set of assignments that satisfies all constraints,
 or to find all such assignments.
 
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Crossword puzzle
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="3">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch04/crossr.pdf
	width 45text%

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Box Frameless
position "b"
hor_pos "c"
has_inner_box 1
inner_pos "b"
use_parbox 0
use_makebox 0
width "30text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\align left
at, be, he, it, on, 
\begin_inset Newline newline
\end_inset

 eta, hat, her, him, one,
\begin_inset Newline newline
\end_inset

 desk, dove, easy, else, help, kind, soon, this,
\begin_inset Newline newline
\end_inset

 dance, first, fuels, given, haste, loses, sense, sound, think, usage 
\end_layout

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator
 
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Dual representations
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Many problems can be represented in different ways as a CSP,
\end_layout

\begin_layout Standard
e.g., the crossword puzzle:
\end_layout

\begin_layout Itemize
First representation: 
\end_layout

\begin_deeper
\begin_layout Itemize
nodes represent word positions: 1-down…6-across 
\end_layout

\begin_layout Itemize
domains are the words 
\end_layout

\begin_layout Itemize
constraints specify that the letters on the intersections must be
\begin_inset space ~
\end_inset

the
\begin_inset space ~
\end_inset

same
\end_layout

\end_deeper
\begin_layout Itemize
Dual representation: 
\end_layout

\begin_deeper
\begin_layout Itemize
nodes represent the individual squares 
\end_layout

\begin_layout Itemize
domains are the letters 
\end_layout

\begin_layout Itemize
constraints specify that the words must fit 
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Representations for image interpretation
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
First representation: 
\end_layout

\begin_deeper
\begin_layout Itemize
nodes represent the chains and regions 
\end_layout

\begin_layout Itemize
domains are the scene objects 
\end_layout

\begin_layout Itemize
constraints correspond to the intersections and adjacency 
\end_layout

\end_deeper
\begin_layout Itemize
Dual representation: 
\end_layout

\begin_deeper
\begin_layout Itemize
nodes represent the intersections 
\end_layout

\begin_layout Itemize
domains are the intersection labels 
\end_layout

\begin_layout Itemize
constraints specify that the chains must have same marking 
\end_layout

\end_deeper
\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Map colouring
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch04/australia.ps
	width 45text%

\end_inset


\end_layout

\begin_layout Description
Variables: 
\begin_inset Formula $\mathit{WA}$
\end_inset

, 
\begin_inset Formula $NT$
\end_inset

, 
\begin_inset Formula $Q$
\end_inset

, 
\begin_inset Formula $\mathit{NSW}$
\end_inset

, 
\begin_inset Formula $V$
\end_inset

, 
\begin_inset Formula $\mathit{SA}$
\end_inset

, 
\begin_inset Formula $T$
\end_inset


\end_layout

\begin_layout Description
Domains: 
\begin_inset Formula $D_{i}=\{red,green,blue\}$
\end_inset


\end_layout

\begin_layout Description
Constraints: adjacent regions must have different colors, 
\begin_inset Newline newline
\end_inset

e.g., 
\begin_inset Formula $\mathit{WA}\neq NT,\mathit{WA}\neq\mathit{SA},NT\neq\mathit{SA},NT\neq Q,\ldots$
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Map colouring
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch04/australia-solution.ps
	width 45text%

\end_inset


\end_layout

\begin_layout Description
Solutions are assignments satisfying all constraints, e.g.,
\begin_inset Newline newline
\end_inset


\begin_inset Formula $\{\mathit{WA}=red,NT=green,Q=red,\mathit{NSW}=green,$
\end_inset


\begin_inset Newline newline
\end_inset

 
\begin_inset Formula $\hphantom{\{}V=red,\mathit{SA}=blue,T=green\}$
\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Constraint graph
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Binary
\begin_inset space ~
\end_inset

CSP: each constraint relates at most two variables
\begin_inset Newline newline
\end_inset

(
\emph on
note:
\emph default
 this does not say anything about the domains)
\end_layout

\begin_layout Description
Constraint
\begin_inset space ~
\end_inset

graph: nodes are variables, arcs show constraints
\end_layout

\begin_layout Standard
\begin_inset VSpace -0.5in*
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch04/australia-csp.ps
	width 45text%

\end_inset


\end_layout

\begin_layout Standard
CSP algorithms can use the graph structure to speed up search, 
\begin_inset Newline newline
\end_inset

e.g., Tasmania is an independent subproblem.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Cryptarithmetic puzzle
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch04/cryptarithmetic.ps
	width 75text%

\end_inset


\end_layout

\begin_layout Description
Variables: 
\begin_inset Formula $F,T,U,W,R,O,X_{1},X_{2},X_{3}$
\end_inset


\end_layout

\begin_layout Description
Domains: 
\begin_inset Formula $\{0,1,2,3,4,5,6,7,8,9\}$
\end_inset


\end_layout

\begin_layout Description
Constraints: 
\begin_inset Formula $alldiff(F,T,U,W,R,O)$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Formula $O+O=R+10\cdot X_{1}$
\end_inset

, etc.
\end_layout

\begin_layout Standard

\emph on
Note:
\emph default
 This is not a binary CSP.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Soving CSPs using search (4.3--4.4)
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Generate-and-test algorithm
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Generate the assignment space 
\begin_inset Formula ${\D}=\D_{V_{1}}\times\D_{V_{2}}\times\ldots\times\D_{V_{n}}$
\end_inset

.
 Test each assignment with the constraints.
 
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hilitec
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Example:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\begin_inset Formula 
\begin{eqnarray*}
{\D} & = & \D_{A}\times\D_{B}\times\D_{C}\times\D_{D}\times\D_{E}\\
 & = & \{1,2,3,4\}\times\{1,2,3,4\}\times\{1,2,3,4\}\\
 &  & \times\{1,2,3,4\}\times\{1,2,3,4\}\\
 & = & \{\tuple{1,1,1,1,1},\tuple{1,1,1,1,2},...,\tuple{4,4,4,4,4}\}.
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Itemize
How many assignments need to be tested for 
\begin_inset Formula $n$
\end_inset

 variables each with domain size 
\begin_inset Formula $d$
\end_inset

? 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Backtracking algorithms
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Explore 
\begin_inset Formula $\D$
\end_inset

 by instantiating the variables one at a time 
\end_layout

\begin_layout Itemize
Evaluate each constraint as soon as all its variables are bound 
\end_layout

\begin_layout Itemize
Any partial assignment that doesn't satisfy the constraint 
\begin_inset Newline newline
\end_inset

can be pruned
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hilitec
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Example
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 Assignment 
\begin_inset Formula $A=1\AND B=1$
\end_inset

 is inconsistent with constraint 
\begin_inset Formula $A\neq B$
\end_inset

 regardless of the value of the other variables.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Simple backtracking example
\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_deeper
\begin_layout Standard
Variables: 
\begin_inset Formula $A$
\end_inset

, 
\begin_inset Formula $B$
\end_inset

, 
\begin_inset Formula $C$
\end_inset

.
 Domains: 
\begin_inset Formula $\D_{A}=\D_{B}=\D_{C}=\{1,2,3,4\}$
\end_inset

.
\end_layout

\begin_layout Standard
Constraints: 
\begin_inset Formula $(A<B)\AND(B<C)$
\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch04/CSP-tree.pdf
	width 80text%

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Australia map colours
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
only<1>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch04/backtrack-progress1c.ps
	width 90text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<2>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch04/backtrack-progress2c.ps
	width 90text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<3>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch04/backtrack-progress3c.ps
	width 90text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\backslash
only<4>{
\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch04/backtrack-progress4c.ps
	width 90text%

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
CSP as graph searching
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A CSP can be solved by graph-searching:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item Totally order the variables, $V_1,
\backslash
ldots,V_n$.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
A node is an assignment of values to some of the variables.
 
\end_layout

\begin_layout Itemize
Suppose node 
\begin_inset Formula $N$
\end_inset

 is the assignment 
\begin_inset Formula $[X_{1}=v_{1},\dots,X_{k}=v_{k}]$
\end_inset

.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Select a variable 
\begin_inset Formula $Y$
\end_inset

 that isn't assigned in 
\begin_inset Formula $N$
\end_inset

.
 
\end_layout

\begin_layout Itemize
For each value 
\begin_inset Formula $y_{i}\in dom(Y)$
\end_inset

, 
\begin_inset Formula $[X_{1}=v_{1},\dots,X_{k}=v_{k},Y=y_{i}]$
\end_inset

 
\begin_inset Newline newline
\end_inset

is a neighbour if it is consistent with the constraints.
 
\end_layout

\end_deeper
\begin_layout Itemize
The start node is the empty assignment.
 
\end_layout

\begin_layout Itemize
A goal node is a total assignment that satisfies the constraints.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Consistency algorithms (4.5)
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Consistency algorithms
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Idea: prune the domains as much as possible before selecting values from
 them.
 
\end_layout

\begin_layout Itemize
A variable is 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

domain consistent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 if no value of the domain of the node is ruled impossible by any of the
 constraints.
 
\end_layout

\begin_layout Standard

\emph on
Example:
\emph default
 Is the scheduling example domain consistent? 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $\D_{B}=\{1,2,3,4\}$
\end_inset

 is 
\emph on
not
\emph default
 domain consistent, 
\begin_inset Newline newline
\end_inset

since 
\begin_inset Formula $B=3$
\end_inset

 violates the constraint 
\begin_inset Formula $B\neq3$
\end_inset

.
 
\end_layout

\begin_layout Itemize
\begin_inset Formula $\D_{C}=\{1,2,3,4\}$
\end_inset

 is 
\emph on
not
\emph default
 domain consistent, 
\begin_inset Newline newline
\end_inset

since 
\begin_inset Formula $C=2$
\end_inset

 violates the constraint 
\begin_inset Formula $C\neq2$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Constraint network
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A 
\emph on
constraint network
\emph default
 is a graph, which has:
\end_layout

\begin_layout Itemize
an oval-shaped node for each variable,
\end_layout

\begin_layout Itemize
a rectangular node for each constraint,
\end_layout

\begin_layout Itemize
a domain of values associated with each variable node, and
\end_layout

\begin_layout Itemize
an arc from variable 
\begin_inset Formula $X$
\end_inset

 to each constraint that involves 
\begin_inset Formula $X$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Constraint network
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename figures/ch04/ConstraintNetwork1.pdf
	width 80text%

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Domain consistency vs.
\begin_inset space ~
\end_inset

arc consistency
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Domain consistency only considers 
\emph on
unary constraints
\end_layout

\begin_deeper
\begin_layout Itemize
these are usually not shown in a constraint network
\end_layout

\begin_layout Itemize
because domain consistency is so very easy to check and maintain
\end_layout

\end_deeper
\begin_layout Itemize
Arc consistency considers 
\emph on
binary
\emph default
 (and more) constraints
\end_layout

\begin_deeper
\begin_layout Itemize
i.e., the nodes and arcs in the constraint network
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Arc consistency
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
An arc 
\begin_inset Formula $\tuple{X,r(X,Y_{1}\dots Y_{n})}$
\end_inset

 is 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

arc consistent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 if:
\end_layout

\begin_deeper
\begin_layout Itemize
for each value 
\begin_inset Formula $x\in dom(X)$
\end_inset

, there is some assignment 
\begin_inset Formula $y_{1}\dots y_{n}\in dom(Y_{1}\dots Y_{n})$
\end_inset

 such that 
\begin_inset Formula $r(x,y_{1}\dots y_{n})$
\end_inset

 is satisfied.
 
\end_layout

\end_deeper
\begin_layout Itemize
A network is arc consistent if all its arcs are arc consistent.
\end_layout

\begin_layout Itemize
What if arc 
\begin_inset Formula $\tuple{X,r(X,Y_{1}\dots Y_{n})}$
\end_inset

 is 
\emph on
not
\emph default
 arc consistent?
\end_layout

\begin_deeper
\begin_layout Itemize
all values of 
\begin_inset Formula $X$
\end_inset

 in 
\begin_inset Formula $dom(X)$
\end_inset

 for which there is no corresponding assignment in 
\begin_inset Formula $dom(Y_{1}\dots Y_{n})$
\end_inset

 can be deleted from 
\begin_inset Formula $dom(X)$
\end_inset

 to make the arc 
\begin_inset Formula $\tuple{X,r(X,Y_{1}\dots Y_{n})}$
\end_inset

 consistent.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Arc consistency algorithm
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
The arcs can be considered in turn making each arc consistent.
 
\end_layout

\begin_layout Itemize
When an arc has been made arc consistent, does it ever need to be checked
 again? 
\end_layout

\begin_deeper
\begin_layout Itemize
An arc 
\begin_inset Formula $\tuple{X,r(X,Y_{1}\dots Y_{n})}$
\end_inset

 needs to be revisited if the domain of one of the 
\begin_inset Formula $Y$
\end_inset

's is reduced.
 
\end_layout

\end_deeper
\begin_layout Itemize
Three possible outcomes when all arcs are made arc consistent: (Is there
 a solution?) 
\end_layout

\begin_deeper
\begin_layout Itemize
One domain is empty 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
barrow
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
uncover
\end_layout

\end_inset

<2->
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

no solution
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
Each domain has a single value 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
barrow
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
uncover
\end_layout

\end_inset

<2->
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

unique solution
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
Some domains have more than one value 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
barrow
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
uncover
\end_layout

\end_inset

<2->
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

there may or may not be a solution
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Quiz: Arc consistency
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The variables and constraints are in the constraint graph:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename figures/ch04/abccsp.pdf
	width 60text%

\end_inset


\end_layout

\begin_layout Standard
Assume the initial domains are 
\begin_inset Formula $\D_{A}=\D_{B}=\D_{C}=\{1,2,3,4\}$
\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
How will the domains look like after making the graph arc consistent?
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Domain splitting (4.6)
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Finding solutions when AC finishes
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
What if some domains have more than one element after AC? 
\end_layout

\begin_layout Itemize
We can always resort to searching
\end_layout

\begin_layout Itemize
Split one of the domains, then recursively solve each half
\end_layout

\begin_deeper
\begin_layout Itemize
i.e., perform AC on the resulting graph, then split a domain, perform AC,
 split a domain, perform AC, split, etc.
\end_layout

\end_deeper
\begin_layout Itemize
It is often best to split a domain in half
\end_layout

\begin_deeper
\begin_layout Itemize
i.e., if 
\begin_inset Formula $\D_{X}=\{1,\dots,1000\}$
\end_inset

, 
\begin_inset Newline newline
\end_inset

we can split into 
\begin_inset Formula $\{1,\dots500\}$
\end_inset

 and 
\begin_inset Formula $\{501,\dots,1000$
\end_inset

}
\end_layout

\end_deeper
\begin_layout Itemize
Do we need to restart from scratch? 
\end_layout

\begin_deeper
\begin_layout Itemize
no, only some arcs risk losing their arc consistency after the split
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Variable elimination (4.7)
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variable elimination
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Complementary simplification methods:
\end_layout

\begin_layout Itemize
Arc consistency (AC) simplifies the network 
\begin_inset Newline newline
\end_inset

by removing values of variables.
 
\end_layout

\begin_layout Itemize
Variable elimination (VE) simplifies the network 
\begin_inset Newline newline
\end_inset

by removing variables.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variable elimination algorithm
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Variable elimination algorithm: 
\end_layout

\begin_layout Itemize
Select a variable 
\begin_inset Formula $X$
\end_inset

 to eliminate.
\end_layout

\begin_deeper
\begin_layout Itemize
Remove 
\begin_inset Formula $X$
\end_inset

 by constructing a new constraint on all variables 
\begin_inset Newline newline
\end_inset

that occur in some 
\begin_inset Formula $X$
\end_inset

 constraint.
\end_layout

\begin_layout Itemize
This new constraint replaces all constraints that involve 
\begin_inset Formula $X$
\end_inset

, forming a reduced network that does not involve 
\begin_inset Formula $X$
\end_inset

.
 
\end_layout

\end_deeper
\begin_layout Itemize
The variables are eliminated according to some 
\emph on

\begin_inset Newline newline
\end_inset

elimination ordering:
\end_layout

\begin_deeper
\begin_layout Itemize
Different elimination orderings can result in different 
\begin_inset Newline newline
\end_inset

intermediate constraints.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The new constraint is constructed so that any solution to the reduced CSP
 can be extended to a solution of the larger CSP that contains X.
 In addition to creating the new constraint, VE provides a way to construct
 a solution to the CSP that contains X from a solution to the reduced CSP.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variable elimination
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Idea: eliminate the variables one-by-one passing their constraints to their
 neighbours 
\end_layout

\begin_layout Plain Layout
Variable Elimination Algorithm: 
\end_layout

\begin_layout Itemize
If there is only one variable, return the intersection of the (unary) constraint
s that contain it 
\end_layout

\begin_layout Itemize
Select a variable 
\begin_inset Formula $X$
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Join the constraints in which 
\begin_inset Formula $X$
\end_inset

 appears, forming constraint 
\begin_inset Formula $R_{1}$
\end_inset

 
\end_layout

\begin_layout Itemize
Project 
\begin_inset Formula $R_{1}$
\end_inset

 onto its variables other than 
\begin_inset Formula $X$
\end_inset

, forming 
\begin_inset Formula $R_{2}$
\end_inset

 
\end_layout

\begin_layout Itemize
Replace all of the constraints in which 
\begin_inset Formula $X_{i}$
\end_inset

 appears by 
\begin_inset Formula $R_{2}$
\end_inset

 
\end_layout

\begin_layout Itemize
Recursively solve the simplified problem, forming 
\begin_inset Formula $R_{3}$
\end_inset

 
\end_layout

\begin_layout Itemize
Return 
\begin_inset Formula $R_{1}$
\end_inset

 joined with 
\begin_inset Formula $R_{3}$
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\end_inset


\end_layout

\begin_layout Separator
\begin_inset Note Note
status open

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variable elimination (cont.)
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
When there is a single variable remaining, if it has no values, the network
 was inconsistent.
 
\end_layout

\begin_layout Itemize
The variables are eliminated according to some 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hilitec
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

elimination ordering
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
Different elimination orderings result in different size intermediate constraint
s.
 
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example network
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename figures/ch04/abcdecsp.pdf
	width 80text%

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Arc-consistent network
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename figures/ch04/abcdecspac.pdf
	width 80text%

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Example: Eliminating variable 
\begin_inset Formula $C$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Description
Constraints: 
\begin_inset Formula $E\neq C$
\end_inset

 and 
\begin_inset Formula $D<C$
\end_inset

.
 
\end_layout

\begin_layout Description
Domains: 
\begin_inset Formula $\D_{C}=\{3,4\}$
\end_inset

, 
\begin_inset Formula $\D_{D}=\{2,3\}$
\end_inset

, 
\begin_inset Formula $\D_{E}=\{2,3,4\}$
\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="right" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
def
\backslash
arraystretch{0.8}
\end_layout

\end_inset


\size small

\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features rotate="0" tabularvalignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $r_{1}:E\neq C$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $C$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $E$
\end_inset

 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
def
\backslash
arraystretch{0.8}
\end_layout

\end_inset


\size small

\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features rotate="0" tabularvalignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $r_{2}:D<C$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $C$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $D$
\end_inset

 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset space ~
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
def
\backslash
arraystretch{0.8}
\end_layout

\end_inset


\size small

\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="4">
<features rotate="0" tabularvalignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $r_{3}:r_{1}\bowtie r_{2}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $C$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $D$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $E$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(join 
\begin_inset Formula $r_{1}$
\end_inset

, 
\begin_inset Formula $r_{2}$
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
pause
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
def
\backslash
arraystretch{0.8}
\end_layout

\end_inset


\size small

\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features rotate="0" tabularvalignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $r_{4}:\pi_{\{D,E\}}r_{3}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $D$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula $E$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
(project 
\begin_inset Formula $r_{3}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="right" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
onto 
\begin_inset Formula $D,E$
\end_inset

)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="right" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Formula ${\color{red}\hookrightarrow}$
\end_inset


\size default
 new constraint
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Resulting network after eliminating 
\begin_inset Formula $C$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename figures/ch04/abcdecspElimC.pdf
	width 80text%

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Section
Local search (4.8--4.9)
\end_layout

\begin_layout Subsection
Iterative best improvement (4.8.1)
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Local search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
Local search / Greedy descent: 
\end_layout

\begin_layout Itemize
Maintain an assignment of a value to each variable 
\end_layout

\begin_layout Itemize
Repeat until a satisfying assignment is found: 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
Select a variable to change 
\end_layout

\begin_layout Itemize
Select a new value for that variable 
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

% At each step, select a ``neighbor'' of the current assignment
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%  (e.g., one that improves some heuristic value).
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%Requires:
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
begin{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item What is a neighbor?
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item Which neighbor should be selected?
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%(Some methods maintain multiple assignments.)
\end_layout

\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Local search for CSPs
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Given an assignment of a value to each variable:
\end_layout

\begin_layout Itemize
A 
\emph on
conflict
\emph default
 is an unsatisfied constraint.
 
\end_layout

\begin_layout Itemize
The goal is an assignment with zero conflicts.
 
\end_layout

\begin_layout Standard
Local search / Greedy descent algorithm: 
\end_layout

\begin_layout Itemize
Repeat until a satisfying assignment is found: 
\begin_inset Newline newline
\end_inset

 
\end_layout

\begin_deeper
\begin_layout Itemize
Select a variable to change 
\end_layout

\begin_layout Itemize
Select a new value for that variable 
\end_layout

\end_deeper
\begin_layout Itemize
Heuristic function to be minimized: the number of conflicts.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variants of greedy descent 
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
To choose a variable to change and a new value for it: 
\end_layout

\begin_layout Itemize
Find a variable-value pair that minimizes the number of conflicts 
\end_layout

\begin_layout Itemize
Select a variable that participates in the most conflicts.
 
\begin_inset Newline newline
\end_inset

 Select a value that minimizes the number of conflicts.
 
\end_layout

\begin_layout Itemize
Select a variable that appears in any conflict.
\begin_inset Newline newline
\end_inset

 Select a value that minimizes the number of conflicts.
 
\end_layout

\begin_layout Itemize
Select a variable at random.
 
\begin_inset Newline newline
\end_inset

 Select a value that minimizes the number of conflicts.
 
\end_layout

\begin_layout Itemize
Select a variable and value at random; 
\begin_inset Newline newline
\end_inset

accept this change if it doesn't increase the number of conflicts.
 
\end_layout

\end_deeper
\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Complex domains
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
How to find new values in complex domains:
\end_layout

\begin_layout Itemize
When the domains are large and ordered, the neighbors of an assignment are
 the adjacent values for one of the variables.
 
\end_layout

\begin_deeper
\begin_layout Itemize
E.g., if the domain is 
\begin_inset Formula $0<X_{i}<1000$
\end_inset

, 
\end_layout

\end_deeper
\begin_layout Itemize
If the domains are continuous, 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

gradient descent
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 changes each variable proportionally to the gradient of the heuristic function
 in that direction:
\end_layout

\begin_deeper
\begin_layout Itemize
The value of variable 
\begin_inset Formula $X_{i}$
\end_inset

 goes from 
\begin_inset Formula $v_{i}$
\end_inset

 to 
\begin_inset Formula $v_{i}-\eta\frac{\partial h}{\partial X_{i}}$
\end_inset

,
\begin_inset Newline newline
\end_inset

where 
\begin_inset Formula $\eta$
\end_inset

 is the step size.
 
\end_layout

\end_deeper
\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
hiliteb{Gradient ascent:} go uphill; $v_i$ becomes $v_i + 
\backslash
eta
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
frac{
\backslash
partial h }{
\backslash
partial X_i}$.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Problems with greedy descent
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Frameless
position "b"
hor_pos "c"
has_inner_box 1
inner_pos "b"
use_parbox 0
use_makebox 0
width "45text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
 
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
raggedright
\end_layout

\end_inset

 a local minimum that is not a global minimum 
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
raggedright
\end_layout

\end_inset

 a plateau where the heuristic values are uninformative 
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
raggedright
\end_layout

\end_inset

 a ridge is a local minimum where 
\begin_inset Formula $n$
\end_inset

-step look-ahead might help 
\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item[Ignorance of the peak]
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Graphics
	filename figures/ch04/Ridgec.pdf
	width 55text%

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Randomized algorithms (4.8.2)
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Randomized algorithms
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Consider two methods to find a minimum value: 
\end_layout

\begin_deeper
\begin_layout Itemize
Greedy descent, starting from some position, keep moving down, and report
 minimum value found 
\end_layout

\begin_layout Itemize
Pick values at random, and report minimum value found 
\end_layout

\end_deeper
\begin_layout Itemize
Which do you expect to work better to find a global minimum? 
\end_layout

\begin_layout Itemize
Can a mix work better? 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Randomized greedy descent
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
As well as downward steps we can allow for: 
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Random steps:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 move to a random neighbor.
 
\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Random restart:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 reassign random values to all variables.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Which is more expensive computationally? 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
1-dimensional illustrative example
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Two 1-dimensional search spaces; step right or left: 
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="right" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/ch04/hills.pdf
	width 80text%

\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="none" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
Which method would most easily find the global minimum? 
\end_layout

\begin_deeper
\begin_layout Itemize
random steps or random restarts?
\end_layout

\end_deeper
\begin_layout Itemize
What happens in hundreds or thousands of dimensions? 
\end_layout

\begin_deeper
\begin_layout Itemize
e.g., different dimensions have different structure? 
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Stochastic local search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Stochastic local search is a mix of: 
\end_layout

\begin_layout Itemize
Greedy descent: move to a lowest neighbor 
\end_layout

\begin_layout Itemize
Random walk: taking some random steps 
\end_layout

\begin_layout Itemize
Random restart: reassigning values to all variables 
\end_layout

\end_deeper
\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Random walk
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
Variants of random walk: 
\end_layout

\begin_layout Itemize
When choosing the best variable-value pair, randomly sometimes choose a
 random variable-value pair.
 
\end_layout

\begin_layout Itemize
When selecting a variable then a value: 
\end_layout

\begin_deeper
\begin_layout Itemize
Sometimes choose any variable that participates in the most conflicts.
 
\end_layout

\begin_layout Itemize
Sometimes choose any variable that participates in any conflict (a red node).
 
\end_layout

\begin_layout Itemize
Sometimes choose any variable.
 
\end_layout

\end_deeper
\begin_layout Itemize
Sometimes choose the best value and sometimes choose a random value.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Variant: Simulated annealing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Pick a variable at random and a new value at random.
 
\end_layout

\begin_layout Itemize
If it is an improvement, adopt it.
 
\end_layout

\begin_layout Itemize
If it isn't an improvement, adopt it probabilistically depending on a temperatur
e parameter, 
\begin_inset Formula $T$
\end_inset

.
 
\end_layout

\begin_deeper
\begin_layout Itemize
With current assignment 
\begin_inset Formula $n$
\end_inset

 and proposed assignment 
\begin_inset Formula $n'$
\end_inset

 we move to 
\begin_inset Formula $n'$
\end_inset

 with probability 
\begin_inset Formula $e^{({h(n')-h(n)})/{T}}$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize
Temperature can be reduced.
 
\end_layout

\begin_layout Plain Layout
Probability of accepting a change: 
\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Temperature 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1-worse 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2-worse 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3-worse
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.91 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.81 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.74
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.37 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.14 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.05
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.25 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.02 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.0003 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.000006
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.00005 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $2\times10^{-9}$
\end_inset

 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $9\times10^{-14}$
\end_inset

 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Tabu lists
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
To prevent cycling we can maintain a 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hiliteb
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

tabu list
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 of the 
\begin_inset Formula $k$
\end_inset

 last assignments.
 
\end_layout

\begin_layout Itemize
Don't allow an assignment that is already on the tabu list.
 
\end_layout

\begin_layout Itemize
If 
\begin_inset Formula $k=1$
\end_inset

, we don't allow an assignment of to the same value to the variable chosen.
 
\end_layout

\begin_layout Itemize
We can implement it more efficiently than as a list of complete assignments.
 
\end_layout

\begin_layout Itemize
It can be expensive if 
\begin_inset Formula $k$
\end_inset

 is large.
 
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Subsection
Evaluating randomized algorithms (4.8.3)
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Comparing stochastic algorithms
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
How can you compare three algorithms when 
\end_layout

\begin_deeper
\begin_layout Itemize
one solves the problem 30% of the time very quickly 
\begin_inset Newline newline
\end_inset

but doesn't halt for the other 70% of the cases 
\end_layout

\begin_layout Itemize
one solves 60% of the cases reasonably quickly 
\begin_inset Newline newline
\end_inset

but doesn't solve the rest 
\end_layout

\begin_layout Itemize
one solves the problem in 100% of the cases, but slowly? 
\end_layout

\end_deeper
\begin_layout Itemize
Summary statistics, such as mean run time, median run time, and mode run
 time don't make much sense.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Runtime distribution
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Plots runtime (or number of steps) and the proportion (or number) of the
 runs that are solved within that runtime.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename figures/ch04/runtimedistc.pdf
	width 70text%

\end_inset

 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Subsection
Population-based methods (4.9)
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Parallel search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Plain Layout
A total assignment is called an 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
keyword
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

individual
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hilitec
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Idea:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 maintain a population of 
\begin_inset Formula $k$
\end_inset

 individuals instead of one.
 
\end_layout

\begin_layout Itemize
At every stage, update each individual in the population.
 
\end_layout

\begin_layout Itemize
Whenever an individual is a solution, it can be reported.
 
\end_layout

\begin_layout Itemize
Like 
\begin_inset Formula $k$
\end_inset

 restarts, but uses 
\begin_inset Formula $k$
\end_inset

 times the minimum number of steps.
 
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Beam search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
hilitec
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout

{
\end_layout

\end_inset

Idea:
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

}
\end_layout

\end_inset

 maintain a population of 
\begin_inset Formula $k$
\end_inset

 assignments in parallel,
\begin_inset Newline newline
\end_inset

 instead of one:
\end_layout

\begin_layout Itemize
At every stage, choose the 
\begin_inset Formula $k$
\end_inset

 best out of all of the neighbors.
 
\end_layout

\begin_layout Itemize
When 
\begin_inset Formula $k=1$
\end_inset

, it is greedy descent.
 
\end_layout

\begin_layout Itemize
When 
\begin_inset Formula $k=\infty$
\end_inset

, it is breadth-first search.
 
\end_layout

\begin_layout Itemize
The value of 
\begin_inset Formula $k$
\end_inset

 lets us limit space and parallelism.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
item Randomness can also be added.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Stochastic beam search
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Like beam search, but it probabilistically chooses 
\begin_inset Newline newline
\end_inset

the 
\begin_inset Formula $k$
\end_inset

 individuals at the next generation:
\end_layout

\begin_layout Itemize
The probability that a neighbor is chosen is 
\begin_inset Newline newline
\end_inset

proportional to its heuristic value.
 
\end_layout

\begin_layout Itemize
This maintains diversity amongst the individuals.
 
\end_layout

\begin_layout Itemize
The heuristic value reflects the fitness of the individual.
 
\end_layout

\begin_layout Itemize
Like asexual reproduction: each individual mutates and 
\begin_inset Newline newline
\end_inset

the fittest ones survive.
 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Genetic algorithms
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Like stochastic beam search, but pairs of individuals 
\begin_inset Newline newline
\end_inset

are combined to create the offspring: 
\end_layout

\begin_layout Itemize
For each generation: 
\end_layout

\begin_deeper
\begin_layout Itemize
Randomly choose pairs of individuals where the fittest individuals are more
 likely to be chosen.
 
\end_layout

\begin_layout Itemize
For each pair, perform a cross-over: form two offspring 
\begin_inset Newline newline
\end_inset

each taking different parts of their parents: 
\end_layout

\begin_layout Itemize
Mutate some values.
 
\end_layout

\end_deeper
\begin_layout Itemize
Stop when a solution is found.
 
\end_layout

\end_deeper
\begin_layout Separator
\begin_inset Note Note
status collapsed

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Genetic algorithm: Crossover
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Given two individuals: 
\begin_inset Formula 
\[
X_{1}=a_{1},X_{2}=a_{2},\dots,X_{m}=a_{m}
\]

\end_inset


\begin_inset Formula 
\[
X_{1}=b_{1},X_{2}=b_{2},\dots,X_{m}=b_{m}
\]

\end_inset


\end_layout

\begin_layout Itemize
Select 
\begin_inset Formula $i$
\end_inset

 at random.
 
\end_layout

\begin_layout Itemize
Form two offspring: 
\begin_inset Formula 
\[
X_{1}=a_{1},\dots,X_{i}=a_{i},X_{i+1}=b_{i+1},\dots,X_{m}=b_{m}
\]

\end_inset


\begin_inset Formula 
\[
X_{1}=b_{1},\dots,X_{i}=b_{i},X_{i+1}=a_{i+1},\dots,X_{m}=a_{m}
\]

\end_inset


\end_layout

\begin_layout Itemize
The effectiveness depends on the ordering of the variables.
 
\end_layout

\begin_layout Itemize
Many variations are possible.
 
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Separator

\end_layout

\end_body
\end_document
